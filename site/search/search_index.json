{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"UPlanet Developer Guide: Extending with #BRO Tags &amp; Services","text":"<p>Complete guide to extending UPlanet with #BRO tags and services</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>What is #BRO?</li> <li>Creating UPlanet-Compatible Applications</li> <li>Encrypted File Sharing Example</li> <li>API Reference</li> <li>Tagging and Advertising Services</li> <li>Developer Quickstart</li> <li>uSPOT Station Intelligence</li> <li>Legacy Documentation</li> </ul>"},{"location":"#what-is-bro","title":"What is #BRO?","text":""},{"location":"#bro-broadcast-relay-operations-is-uplanets-tagging-system-for-decentralized-services-and-applications-it-enables","title":"BRO (Broadcast Relay Operations) is UPlanet's tagging system for decentralized services and applications. It enables:","text":"<ul> <li>Service Discovery: Find available services in your area</li> <li>Interoperability: Standardized communication between applications</li> <li>Geographic Intelligence: Location-based service matching</li> <li>Decentralized Architecture: No central authority required</li> </ul>"},{"location":"#why-use-bro","title":"Why Use #BRO?","text":"<ol> <li>Automatic Discovery: Services are automatically found by UPlanet users</li> <li>Geographic Context: Services are matched based on user location</li> <li>Standardized Interface: Common API patterns across all services</li> <li>Privacy-Preserving: Direct peer-to-peer communication</li> <li>Extensible: Easy to add new service types</li> </ol>"},{"location":"#philosophy","title":"Philosophy","text":"<p>UPlanet follows an open, composable, and decentralized approach: - Open: All protocols and APIs are documented and accessible - Composable: Services can be combined and extended - Decentralized: No single point of control or failure</p>"},{"location":"#creating-uplanet-compatible-applications","title":"Creating UPlanet-Compatible Applications","text":""},{"location":"#core-principles","title":"Core Principles","text":"<ol> <li>Tag Your Service: Use #BRO and relevant tags in your manifest</li> <li>Expose APIs: Provide REST endpoints or shell scripts for interaction</li> <li>Follow Conventions: Use UPlanet directory structures and naming</li> <li>Document Everything: Clear APIs and usage examples</li> </ol>"},{"location":"#example-generate_ipfs_structuresh-udrive","title":"Example: <code>generate_ipfs_structure.sh</code> (uDRIVE)","text":"<p>This script transforms any folder into a decentralized drive, generating a manifest and providing a modern web interface for browsing, editing, and sharing files.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Incremental IPFS Publishing: Only uploads new or modified files</li> <li>Markdown Editor: Built-in editor for documents</li> <li>File Copy Between uDRIVE Instances: Seamless file sharing</li> <li>NOSTR Authentication: Secure uploads using decentralized identity</li> </ul>"},{"location":"#how-to-use","title":"How to Use","text":"<pre><code># Basic usage\n./generate_ipfs_structure.sh ./myfolder\n\n# With detailed logging\n./generate_ipfs_structure.sh --log ./myfolder\n\n# The script returns a CID - access your drive at:\n# http://127.0.0.1:8080/ipfs/[CID]/\n</code></pre>"},{"location":"#how-to-extend","title":"How to Extend","text":"<ol> <li> <p>Add a manifest.json with tags: <pre><code>{\n  \"name\": \"MyCoolApp\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A UPlanet-compatible application\",\n  \"tags\": [\"#BRO\", \"#storage\", \"#documents\"],\n  \"api\": \"/api/mycoolapp\",\n  \"author\": \"Your Name\",\n  \"license\": \"AGPL-3.0\"\n}\n</code></pre></p> </li> <li> <p>Implement a REST or shell API for your service</p> </li> <li>Advertise your service in the UPlanet swarm (see below)</li> </ol>"},{"location":"#directory-structure","title":"Directory Structure","text":"<pre><code>myapp/\n\u251c\u2500\u2500 Documents/     # User documents\n\u251c\u2500\u2500 Images/        # User images  \n\u251c\u2500\u2500 Videos/        # User videos\n\u251c\u2500\u2500 Music/         # User audio\n\u251c\u2500\u2500 manifest.json  # App metadata and tags\n\u251c\u2500\u2500 _index.html    # Web interface\n\u2514\u2500\u2500 api/           # API endpoints\n    \u2514\u2500\u2500 myapp.sh   # Main API script\n</code></pre>"},{"location":"#encrypted-file-sharing-example","title":"Encrypted File Sharing Example","text":"<p>This example demonstrates secure file sharing using NOSTR/NaCl, age, and GPG:</p> <pre><code>#!/bin/bash\n# secure_share.sh\n\n# Generate NOSTR keypair\nNOSTR_KEY=$(keygen -t nostr \"salt\" \"pepper\")\nNOSTR_PUB=$(echo \"$NOSTR_KEY\" | grep \"NPUB=\" | cut -d'=' -f2)\n\n# Encrypt file with age\nage -r \"$NOSTR_PUB\" -o encrypted_file.age original_file.txt\n\n# Create NOSTR event\nnostpy-cli send_event \\\n  -privkey \"$NOSTR_SEC\" \\\n  -kind 1 \\\n  -content \"Encrypted file: $(ipfs add encrypted_file.age)\" \\\n  -tags \"[['t', 'secure-share'], ['p', '$RECIPIENT_PUB']]\" \\\n  --relay \"ws://127.0.0.1:7777\"\n</code></pre>"},{"location":"#api-reference","title":"API Reference","text":""},{"location":"#ustatssh-territory-discovery","title":"Ustats.sh - Territory Discovery","text":"<p>Discover active users and services in your area:</p> <pre><code># Get statistics for Paris area\nSTATS_FILE=$(./Ustats.sh 48.85 2.35 0.1)\n\n# Extract available services\nSERVICES=$(cat \"$STATS_FILE\" | jq -r '.SWARM[].services[]' | sort -u)\necho \"Available services: $SERVICES\"\n</code></pre>"},{"location":"#nostrauth-authentication","title":"NOSTRAuth - Authentication","text":"<p>Decentralized authentication using NOSTR keys:</p> <pre><code>// Connect to UPlanet relay\nconst relay = NostrTools.relayInit('ws://127.0.0.1:7777');\nawait relay.connect();\n\n// Create authentication event (NIP-42)\nconst event = {\n    kind: 22242,\n    created_at: Math.floor(Date.now() / 1000),\n    tags: [\n        ['relay', 'ws://127.0.0.1:7777'],\n        ['challenge', 'uplanet-auth-' + Date.now()]\n    ],\n    content: 'Authentication for UPlanet API',\n    pubkey: publicKey\n};\n\n// Sign and publish\nconst signedEvent = NostrTools.finishEvent(event, privateKey);\nawait relay.publish(signedEvent);\n</code></pre>"},{"location":"#generate_ipfs_structuresh-udrive","title":"generate_ipfs_structure.sh - uDRIVE","text":"<p>Create decentralized file storage:</p> <pre><code># Generate IPFS structure\nCID=$(./generate_ipfs_structure.sh ./myfiles)\n\n# Access your drive at:\necho \"http://127.0.0.1:8080/ipfs/$CID/\"\n</code></pre>"},{"location":"#tagging-and-advertising-services","title":"Tagging and Advertising Services","text":""},{"location":"#how-to-make-your-service-discoverable","title":"How to Make Your Service Discoverable","text":"<ol> <li> <p>Add Tags to Your Manifest: <pre><code>{\n  \"name\": \"MyCoolApp\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A UPlanet-compatible application\",\n  \"tags\": [\"#BRO\", \"#music\", \"#calendar\", \"#social\"],\n  \"api\": \"/api/mycoolapp\",\n  \"author\": \"Your Name\",\n  \"license\": \"AGPL-3.0\",\n  \"endpoints\": {\n    \"upload\": \"/api/upload\",\n    \"download\": \"/api/download\",\n    \"search\": \"/api/search\"\n  }\n}\n</code></pre></p> </li> <li> <p>Announce on NOSTR Relay: <pre><code># Create announcement event\ncat &gt; announcement.json &lt;&lt; EOF\n{\n  \"kind\": 1,\n  \"content\": \"New #BRO service: MyCoolApp - Music streaming and calendar management\",\n  \"tags\": [\n    [\"t\", \"bro\"],\n    [\"t\", \"music\"],\n    [\"t\", \"calendar\"],\n    [\"latitude\", \"48.8566\"],\n    [\"longitude\", \"2.3522\"]\n  ]\n}\nEOF\n\n# Publish announcement\nnostpy-cli send_event -f announcement.json --relay \"ws://127.0.0.1:7777\"\n</code></pre></p> </li> <li> <p>Register with Ustats.sh: <pre><code># Your service will be automatically discovered\n# when users run Ustats.sh in your area\n</code></pre></p> </li> </ol>"},{"location":"#service-discovery","title":"Service Discovery","text":"<p>Other users can discover your service using:</p> <pre><code># Find all #BRO services\n./Ustats.sh | jq -r '.SWARM[].services[]' | grep \"#BRO\" | sort -u\n\n# Find music services\n./Ustats.sh | jq -r '.SWARM[] | select(.services[] | contains(\"#music\")) | .node_id'\n</code></pre>"},{"location":"#developer-quickstart","title":"Developer Quickstart","text":""},{"location":"#1-fork-and-extend","title":"1. Fork and Extend","text":"<pre><code># Clone the UPlanet repository\ngit clone https://github.com/your-username/uplanet-app.git\ncd uplanet-app\n\n# Create your service structure\nmkdir -p {Documents,Images,Videos,Music,api}\ntouch manifest.json\n</code></pre>"},{"location":"#2-create-your-api","title":"2. Create Your API","text":"<pre><code># Create main API script\ncat &gt; api/myservice.sh &lt;&lt; 'EOF'\n#!/bin/bash\n\ncase \"$1\" in\n    \"upload\")\n        # Handle file upload\n        echo \"File uploaded successfully\"\n        ;;\n    \"download\")\n        # Handle file download\n        echo \"File downloaded successfully\"\n        ;;\n    \"search\")\n        # Handle search\n        echo \"Search results\"\n        ;;\n    *)\n        echo \"Usage: $0 {upload|download|search}\"\n        exit 1\n        ;;\nesac\nEOF\n\nchmod +x api/myservice.sh\n</code></pre>"},{"location":"#3-create-your-manifest","title":"3. Create Your Manifest","text":"<pre><code>{\n  \"name\": \"MyService\",\n  \"version\": \"1.0.0\",\n  \"description\": \"My UPlanet-compatible service\",\n  \"tags\": [\"#BRO\", \"#custom\"],\n  \"api\": \"/api/myservice.sh\",\n  \"author\": \"Your Name\",\n  \"license\": \"AGPL-3.0\"\n}\n</code></pre>"},{"location":"#4-test-and-deploy","title":"4. Test and Deploy","text":"<pre><code># Test your service\n./generate_ipfs_structure.sh --log .\n\n# Get the CID\nCID=$(./generate_ipfs_structure.sh .)\necho \"Your service is available at: http://127.0.0.1:8080/ipfs/$CID/\"\n\n# Announce your service\necho \"New #BRO service deployed: http://127.0.0.1:8080/ipfs/$CID/\"\n</code></pre>"},{"location":"#5-join-the-community","title":"5. Join the Community","text":"<ul> <li>Chat: Join the UPlanet developer chat</li> <li>Issues: Report bugs and request features</li> <li>Contributions: Submit pull requests and improvements</li> </ul>"},{"location":"#uspot-station-intelligence","title":"uSPOT Station Intelligence","text":""},{"location":"#overview","title":"Overview","text":"<p>Each Astroport station provides a uSPOT API (port 54321) that intercepts NOSTR messages based on their geographical location to feed both personal AI assistants and UMAP (Unified Memory and Processing) collective intelligence.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<ol> <li>Message Interception: All NOSTR messages are filtered by location using <code>1.sh</code></li> <li>Geographic Memory: Messages are stored in <code>short_memory.py</code> based on coordinates</li> <li>AI Processing: Messages tagged with <code>#BRO</code> or <code>#BOT</code> trigger AI responses</li> <li>UMAP Intelligence: Collective memory is built for each geographic area</li> </ol>"},{"location":"#ai-features-available","title":"AI Features Available","text":"<ul> <li>Search Integration (<code>#search</code>): Internet search via Perplexica</li> <li>Image Generation (<code>#image</code>): AI image creation with ComfyUI</li> <li>Video Generation (<code>#video</code>): AI video creation</li> <li>Music Generation (<code>#music</code>): AI music composition</li> <li>YouTube Processing (<code>#youtube</code>): Download and convert videos</li> <li>Voice Synthesis (<code>#pierre</code>, <code>#amelie</code>): Text-to-speech generation</li> </ul>"},{"location":"#integration-example","title":"Integration Example","text":"<pre><code>// Send AI message to local station\nasync function sendAIMessage(message, latitude, longitude) {\n    const uspotApiUrl = getUSPOTUrl('/astrobot_chat');\n    const response = await fetch(uspotApiUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n            user_pubkey: publicKey,\n            message: message,\n            latitude: latitude.toFixed(6),\n            longitude: longitude.toFixed(6),\n            application: 'MyApp'\n        })\n    });\n\n    return response.json();\n}\n\n// Usage\nsendAIMessage(\"#BRO #search latest AI developments\", 48.8566, 2.3522);\n</code></pre>"},{"location":"#benefits","title":"Benefits","text":"<ol> <li>Geographic Intelligence: Each location develops its own collective memory</li> <li>Personal AI: Users get personalized AI responses based on their history</li> <li>Decentralized: Each station operates independently</li> <li>Privacy-Preserving: Messages are stored locally with user consent</li> <li>Scalable: New stations automatically join the network</li> </ol>"},{"location":"#maintenance-requirements","title":"Maintenance Requirements","text":"<ul> <li>28-Day Publishing: Users must publish at least every 28 days to maintain UMAP access</li> <li>Memory Cleanup: Old messages are automatically archived after 50 entries</li> <li>AI Model Updates: Ollama models are maintained automatically</li> </ul>"},{"location":"#legacy-documentation","title":"Legacy Documentation","text":"<p>For historical reference and advanced features:</p> <ul> <li>API.NOSTRAuth.readme.md - Complete NOSTR authentication guide</li> <li>NOSTRCARD.refresh.sh - Card management system</li> <li>Ustats.sh - Territory discovery API</li> <li>generate_ipfs_structure.sh - IPFS application generator</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>This documentation is open for contributions! To improve it:</p> <ol> <li>Fork the repository</li> <li>Make your changes</li> <li>Submit a pull request</li> </ol> <p>For questions or help, join the UPlanet developer community.</p> <p>Last updated: January 2024</p>"},{"location":"api-reference/","title":"UPlanet API Reference","text":"<p>Complete API documentation for UPlanet services and tools</p>"},{"location":"api-reference/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Ustats.sh - Territory Discovery</li> <li>NOSTRAuth - Authentication</li> <li>generate_ipfs_structure.sh - uDRIVE</li> <li>NOSTRCARD.refresh.sh - Card Management</li> <li>uSPOT API - Station Intelligence</li> </ul>"},{"location":"api-reference/#ustatssh-territory-discovery","title":"Ustats.sh - Territory Discovery","text":""},{"location":"api-reference/#overview","title":"Overview","text":"<p><code>Ustats.sh</code> is the primary API for discovering territory data, active users, and available services in the UPlanet ecosystem.</p>"},{"location":"api-reference/#usage","title":"Usage","text":"<pre><code># Get global statistics\n./Ustats.sh\n\n# Get statistics for a specific area\n./Ustats.sh &lt;LAT&gt; &lt;LON&gt; &lt;DEG&gt;\n\n# Example: Paris area (48.85\u00b0N, 2.35\u00b0E, 0.1\u00b0 radius)\n./Ustats.sh 48.85 2.35 0.1\n</code></pre>"},{"location":"api-reference/#parameters","title":"Parameters","text":"Parameter Type Description Example <code>LAT</code> float Latitude in decimal degrees <code>48.85</code> <code>LON</code> float Longitude in decimal degrees <code>2.35</code> <code>DEG</code> float Search radius in degrees (0.1 \u2248 11km) <code>0.1</code>"},{"location":"api-reference/#output-format","title":"Output Format","text":"<p>The script returns the path to a JSON file containing territory data including active users, services, and economic statistics.</p>"},{"location":"api-reference/#nostrauth-authentication","title":"NOSTRAuth - Authentication","text":""},{"location":"api-reference/#overview_1","title":"Overview","text":"<p>NOSTRAuth provides decentralized authentication using NOSTR keys (NIP-42) for secure, serverless authentication in UPlanet applications.</p>"},{"location":"api-reference/#javascript-integration","title":"JavaScript Integration","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;UPlanet NOSTR Authentication&lt;/title&gt;\n    &lt;script src=\"https://ipfs.copylaradio.com/ipfs/QmXEmaPRUaGcvhuyeG99mHHNyP43nn8GtNeuDok8jdpG4a/nostr.bundle.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"status\"&gt;Connecting to NOSTR...&lt;/div&gt;\n    &lt;button onclick=\"authenticate()\"&gt;Authenticate&lt;/button&gt;\n\n    &lt;script&gt;\n        async function authenticate() {\n            try {\n                const relay = NostrTools.relayInit('ws://127.0.0.1:7777');\n                await relay.connect();\n\n                const event = {\n                    kind: 22242,\n                    created_at: Math.floor(Date.now() / 1000),\n                    tags: [\n                        ['relay', 'ws://127.0.0.1:7777'],\n                        ['challenge', 'test-challenge']\n                    ],\n                    content: 'Authentication request',\n                    pubkey: 'your_public_key_here'\n                };\n\n                const signedEvent = NostrTools.finishEvent(event, privateKey);\n                await relay.publish(signedEvent);\n\n                const response = await fetch('/api/test-nostr', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                    body: `npub=${yourNpub}`\n                });\n\n                const result = await response.json();\n                document.getElementById('status').innerHTML = \n                    result.auth_verified ? \n                    '&lt;p style=\"color: green;\"&gt;\u2705 Authenticated!&lt;/p&gt;' : \n                    '&lt;p style=\"color: red;\"&gt;\u274c Authentication failed&lt;/p&gt;';\n\n            } catch (error) {\n                document.getElementById('status').innerHTML = \n                    `&lt;p style=\"color: red;\"&gt;\u274c Error: ${error.message}&lt;/p&gt;`;\n            }\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"api-reference/#generate_ipfs_structuresh-udrive","title":"generate_ipfs_structure.sh - uDRIVE","text":""},{"location":"api-reference/#overview_2","title":"Overview","text":"<p><code>generate_ipfs_structure.sh</code> creates IPFS-compatible applications with automatic file organization, manifest generation, and web interfaces.</p>"},{"location":"api-reference/#usage_1","title":"Usage","text":"<pre><code># Generate IPFS structure for current directory\n./generate_ipfs_structure.sh .\n\n# Generate with detailed logging\n./generate_ipfs_structure.sh --log .\n\n# Generate for specific directory\n./generate_ipfs_structure.sh /path/to/your/app\n</code></pre>"},{"location":"api-reference/#features","title":"Features","text":"<ul> <li>Automatic File Organization: Sorts files by type (Images, Music, Videos, Documents)</li> <li>Manifest Generation: Creates manifest.json with file inventory and metadata</li> <li>Web Interface: Modern browser-based file explorer</li> <li>Incremental Updates: Only processes new or modified files</li> </ul>"},{"location":"api-reference/#nostrcardrefreshsh-card-management","title":"NOSTRCARD.refresh.sh - Card Management","text":""},{"location":"api-reference/#overview_3","title":"Overview","text":"<p><code>NOSTRCARD.refresh.sh</code> manages NOSTR cards, payments, and benefit distribution with weekly payment cycles.</p>"},{"location":"api-reference/#configuration","title":"Configuration","text":"<pre><code># Default payment amounts (in \u1e90en)\nNCARD=1    # MULTIPASS payment amount (\u1e90en)\nZCARD=4    # ZENCARD payment amount (\u1e90en)\n</code></pre>"},{"location":"api-reference/#uspot-api-station-intelligence","title":"uSPOT API - Station Intelligence","text":""},{"location":"api-reference/#overview_4","title":"Overview","text":"<p>Each Astroport station provides a uSPOT API (port 54321) that intercepts NOSTR messages based on their geographical location to feed both personal AI assistants and UMAP (Unified Memory and Processing) collective intelligence.</p>"},{"location":"api-reference/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   NOSTR Relay   \u2502\u2500\u2500\u2500\u25b6\u2502   Filter 1.sh   \u2502\u2500\u2500\u2500\u25b6\u2502 UPlanet_IA_     \u2502\n\u2502   (strfry)      \u2502    \u2502   (Location     \u2502    \u2502 Responder.sh    \u2502\n\u2502                  \u2502    \u2502    Filter)      \u2502    \u2502                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502                        \u2502\n                                \u25bc                        \u25bc\n                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                       \u2502  short_memory   \u2502    \u2502   Personal AI   \u2502\n                       \u2502     .py         \u2502    \u2502   (Ollama)      \u2502\n                       \u2502                 \u2502    \u2502                 \u2502\n                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502                        \u2502\n                                \u25bc                        \u25bc\n                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                       \u2502   UMAP Memory   \u2502    \u2502   AI Response   \u2502\n                       \u2502   (Geographic   \u2502    \u2502   (NOSTR)       \u2502\n                       \u2502    Context)     \u2502    \u2502                 \u2502\n                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/#message-interception-process","title":"Message Interception Process","text":""},{"location":"api-reference/#1-location-based-filtering-1sh","title":"1. Location-Based Filtering (<code>1.sh</code>)","text":"<p>The relay filter intercepts all NOSTR messages and processes them based on location:</p> <pre><code># Message classification\nif ! get_key_directory \"$pubkey\"; then\n    check=\"nobody\"  # Visitor\nelse\n    if [[ $KNAME =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$ ]]; then\n        check=\"player\"  # Registered NOSTR card\n    else\n        check=\"uplanet\"  # UPlanet system\n    fi\nfi\n</code></pre>"},{"location":"api-reference/#2-geographic-memory-storage-short_memorypy","title":"2. Geographic Memory Storage (<code>short_memory.py</code>)","text":"<p>Messages are stored in two memory systems:</p> <p>UMAP Memory (Geographic Context): <pre><code># File: ~/.zen/strfry/uplanet_memory/{lat}_{lon}.json\n{\n  \"latitude\": \"48.8566\",\n  \"longitude\": \"2.3522\", \n  \"messages\": [\n    {\n      \"timestamp\": \"2024-01-15T10:30:00Z\",\n      \"event_id\": \"abc123...\",\n      \"pubkey\": \"user_hex_key\",\n      \"content\": \"Message content\"\n    }\n  ]\n}\n</code></pre></p> <p>Personal Memory (User Context): <pre><code># File: ~/.zen/strfry/uplanet_memory/pubkey/{pubkey}.json\n{\n  \"pubkey\": \"user_hex_key\",\n  \"messages\": [\n    {\n      \"timestamp\": \"2024-01-15T10:30:00Z\",\n      \"event_id\": \"abc123...\",\n      \"latitude\": \"48.8566\",\n      \"longitude\": \"2.3522\",\n      \"content\": \"Message content\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api-reference/#3-ai-processing-uplanet_ia_respondersh","title":"3. AI Processing (<code>UPlanet_IA_Responder.sh</code>)","text":"<p>Messages tagged with <code>#BRO</code> or <code>#BOT</code> trigger AI processing:</p> <pre><code># AI Response Generation\nif [[ \"$message_text\" =~ \\#BRO\\  || \"$message_text\" =~ \\#BOT\\  ]]; then\n\n    # Load user's personal memory\n    QUESTION=\"$($MY_PATH/question.py \"${cleaned_text}\" --pubkey ${PUBKEY})\"\n\n    # Generate AI response using Ollama\n    KeyANSWER=\"$($MY_PATH/question.py \"${cleaned_text}\" --pubkey ${PUBKEY})\"\n\n    # Send response via NOSTR\n    nostpy-cli send_event \\\n      -privkey \"$NPRIV_HEX\" \\\n      -kind 1 \\\n      -content \"$KeyANSWER\" \\\n      -tags \"[['e', '$EVENT'], ['p', '$PUBKEY']]\" \\\n      --relay \"$myRELAY\"\nfi\n</code></pre>"},{"location":"api-reference/#special-ai-features","title":"Special AI Features","text":""},{"location":"api-reference/#1-search-integration-search","title":"1. Search Integration (<code>#search</code>)","text":"<pre><code>if [[ \"$message_text\" =~ \\#search ]]; then\n    cleaned_text=$(sed 's/#BOT//g; s/#BRO//g; s/#search//g; s/\"//g' &lt;&lt;&lt; \"$message_text\")\n    KeyANSWER=\"$($MY_PATH/perplexica_search.sh \"${cleaned_text}\")\"\nfi\n</code></pre>"},{"location":"api-reference/#2-image-generation-image","title":"2. Image Generation (<code>#image</code>)","text":"<pre><code>if [[ \"$message_text\" =~ \\#image ]]; then\n    cleaned_text=$(sed 's/#BOT//g; s/#BRO//g; s/#image//g; s/\"//g' &lt;&lt;&lt; \"$message_text\")\n    IMAGE_URL=\"$($MY_PATH/generate_image.sh \"${cleaned_text}\")\"\n    KeyANSWER=\"\ud83d\uddbc\ufe0f $TIMESTAMP (\u23f1\ufe0f ${execution_time%.*} s)\\n\ud83d\udcdd Description: $cleaned_text\\n\ud83d\udd17 $IMAGE_URL\"\nfi\n</code></pre>"},{"location":"api-reference/#3-video-generation-video","title":"3. Video Generation (<code>#video</code>)","text":"<pre><code>if [[ \"$message_text\" =~ \\#video ]]; then\n    cleaned_text=$(sed 's/#BOT//g; s/#BRO//g; s/#video//g; s/\"//g' &lt;&lt;&lt; \"$message_text\")\n    VIDEO_AI_RETURN=\"$($MY_PATH/generate_video.sh \"${cleaned_text}\" \"$MY_PATH/workflow/Text2VideoWan2.1.json\")\"\nfi\n</code></pre>"},{"location":"api-reference/#4-music-generation-music","title":"4. Music Generation (<code>#music</code>)","text":"<pre><code>if [[ \"$message_text\" =~ \\#music ]]; then\n    cleaned_text=$(sed 's/#BOT//g; s/#BRO//g; s/#music//g; s/\"//g' &lt;&lt;&lt; \"$message_text\")\n    MUSIC_URL=\"$($MY_PATH/generate_music.sh \"${cleaned_text}\")\"\nfi\n</code></pre>"},{"location":"api-reference/#5-youtube-processing-youtube","title":"5. YouTube Processing (<code>#youtube</code>)","text":"<pre><code>if [[ \"$message_text\" =~ \\#youtube ]]; then\n    youtube_url=$(echo \"$message_text\" | grep -oE 'http[s]?://(www\\.)?(youtube\\.com|youtu\\.be)/[^ ]+')\n    if [[ \"$message_text\" =~ \\#mp3 ]]; then\n        media_url=$($MY_PATH/process_youtube.sh \"$youtube_url\" \"mp3\")\n    else\n        media_url=$($MY_PATH/process_youtube.sh \"$youtube_url\" \"mp4\")\n    fi\nfi\n</code></pre>"},{"location":"api-reference/#6-voice-synthesis-pierre-amelie","title":"6. Voice Synthesis (<code>#pierre</code>, <code>#amelie</code>)","text":"<pre><code>if [[ \"$message_text\" =~ \\#pierre || \"$message_text\" =~ \\#amelie ]]; then\n    if [[ \"$message_text\" =~ \\#pierre ]]; then\n        voice=\"pierre\"\n    elif [[ \"$message_text\" =~ \\#amelie ]]; then\n        voice=\"amelie\"\n    fi\n    audio_url=$($MY_PATH/generate_speech.sh \"$cleaned_text\" \"$voice\")\nfi\n</code></pre>"},{"location":"api-reference/#umap-intelligence-system","title":"UMAP Intelligence System","text":""},{"location":"api-reference/#geographic-memory-activation","title":"Geographic Memory Activation","text":"<p>UMAP memory is activated when users publish at least every 28 days:</p> <pre><code># UMAP memory storage\nUMAPPATH=\"${HOME}/.zen/tmp/${IPFSNODEID}/UPLANET/__/_${RLAT}_${RLON}/_${SLAT}_${SLON}/_${LAT}_${LON}\"\n\n# UMAP NOSTR key generation\nUMAPNPUB=$($HOME/.zen/Astroport.ONE/tools/keygen -t nostr \"${UPLANETNAME}${LAT}\" \"${UPLANETNAME}${LON}\")\nUMAPHEX=$($HOME/.zen/Astroport.ONE/tools/nostr2hex.py \"$UMAPNPUB\")\n\n# Follow UMAP for collective intelligence\nUMAPNSEC=$($HOME/.zen/Astroport.ONE/tools/keygen -t nostr \"${UPLANETNAME}${LAT}\" \"${UPLANETNAME}${LON}\" -s)\n${MY_PATH}/../tools/nostr_follow.sh \"$UMAPNSEC\" \"$PUBKEY\" 2&gt;/dev/null\n</code></pre>"},{"location":"api-reference/#memory-management","title":"Memory Management","text":"<pre><code># Memory commands\nif [[ \"$message_text\" =~ \\#mem ]]; then\n    # Display conversation history\n    jq -r '.messages | to_entries | .[-30:] | .[] | \"\ud83d\udcc5 \\(.value.timestamp | strptime(\"%Y-%m-%dT%H:%M:%SZ\") | strftime(\"%d/%m/%Y %H:%M\"))\\n\ud83d\udcac \\(.value.content)\"' \"$memory_file\"\nfi\n\nif [[ \"$message_text\" =~ \\#reset ]]; then\n    # Clear user memory\n    rm -f \"$memory_file\"\nfi\n</code></pre>"},{"location":"api-reference/#api-endpoints-54321py","title":"API Endpoints (54321.py)","text":"<p>Each station provides these endpoints:</p>"},{"location":"api-reference/#1-territory-discovery","title":"1. Territory Discovery","text":"<pre><code>GET /?lat={latitude}&amp;lon={longitude}&amp;deg={radius}\n# Returns: Territory statistics and active services\n</code></pre>"},{"location":"api-reference/#2-nostr-authentication","title":"2. NOSTR Authentication","text":"<pre><code>POST /api/test-nostr\n# Body: npub={user_public_key}\n# Returns: Authentication status\n</code></pre>"},{"location":"api-reference/#3-file-upload-with-nostr-auth","title":"3. File Upload with NOSTR Auth","text":"<pre><code>POST /api/upload\n# Headers: npub={user_public_key}\n# Body: file upload\n# Returns: IPFS CID and file metadata\n</code></pre>"},{"location":"api-reference/#4-ai-chat-interface","title":"4. AI Chat Interface","text":"<pre><code>POST /astrobot_chat\n# Body: {\n#   \"user_pubkey\": \"hex_key\",\n#   \"message\": \"User message\",\n#   \"latitude\": \"48.8566\",\n#   \"longitude\": \"2.3522\",\n#   \"application\": \"app_name\"\n# }\n# Returns: AI response event ID\n</code></pre>"},{"location":"api-reference/#integration-examples","title":"Integration Examples","text":""},{"location":"api-reference/#1-javascript-client","title":"1. JavaScript Client","text":"<pre><code>// Get USPOT API URL from current location\nfunction getUSPOTUrl(route) {\n    const currentUrl = new URL(window.location.href);\n    let newUrl = new URL(currentUrl.origin);\n\n    // Transform 'ipfs.domain.tld' to 'u.domain.tld'\n    if (currentUrl.hostname.startsWith('ipfs.')) {\n        newUrl.hostname = newUrl.hostname.replace('ipfs.', 'u.');\n    }\n\n    // Change port to 54321\n    if (currentUrl.port === '8080' || currentUrl.port !== '') {\n        newUrl.port = '54321';\n    }\n\n    return newUrl.toString() + route;\n}\n\n// Send AI message\nasync function sendAIMessage(message, latitude, longitude) {\n    const uspotApiUrl = getUSPOTUrl('/astrobot_chat');\n    const response = await fetch(uspotApiUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n            user_pubkey: publicKey,\n            message: message,\n            latitude: latitude.toFixed(6),\n            longitude: longitude.toFixed(6),\n            application: 'MyApp'\n        })\n    });\n\n    return response.json();\n}\n</code></pre>"},{"location":"api-reference/#2-python-integration","title":"2. Python Integration","text":"<pre><code>import requests\nimport json\n\nclass USPOTClient:\n    def __init__(self, base_url=\"http://127.0.0.1:54321\"):\n        self.base_url = base_url\n\n    def get_territory_stats(self, lat, lon, radius=0.1):\n        \"\"\"Get territory statistics\"\"\"\n        response = requests.get(\n            f\"{self.base_url}/\",\n            params={\"lat\": lat, \"lon\": lon, \"deg\": radius}\n        )\n        return response.json()\n\n    def authenticate_nostr(self, npub):\n        \"\"\"Authenticate with NOSTR\"\"\"\n        response = requests.post(\n            f\"{self.base_url}/api/test-nostr\",\n            data={\"npub\": npub}\n        )\n        return response.json()\n\n    def upload_file(self, file_path, npub):\n        \"\"\"Upload file with NOSTR authentication\"\"\"\n        with open(file_path, 'rb') as f:\n            files = {'file': f}\n            data = {'npub': npub}\n            response = requests.post(\n                f\"{self.base_url}/api/upload\",\n                files=files,\n                data=data\n            )\n        return response.json()\n\n    def send_ai_message(self, message, pubkey, lat, lon):\n        \"\"\"Send message to AI\"\"\"\n        data = {\n            \"user_pubkey\": pubkey,\n            \"message\": message,\n            \"latitude\": str(lat),\n            \"longitude\": str(lon),\n            \"application\": \"PythonClient\"\n        }\n        response = requests.post(\n            f\"{self.base_url}/astrobot_chat\",\n            json=data\n        )\n        return response.json()\n\n# Usage\nclient = USPOTClient()\nstats = client.get_territory_stats(48.8566, 2.3522)\nai_response = client.send_ai_message(\"#BRO Hello AI!\", \"user_hex_key\", 48.8566, 2.3522)\n</code></pre>"},{"location":"api-reference/#benefits-of-the-uspot-system","title":"Benefits of the uSPOT System","text":"<ol> <li>Geographic Intelligence: Each location develops its own collective memory</li> <li>Personal AI: Users get personalized AI responses based on their history</li> <li>Decentralized: Each station operates independently</li> <li>Privacy-Preserving: Messages are stored locally with user consent</li> <li>Scalable: New stations automatically join the network</li> <li>Interoperable: Works with existing NOSTR infrastructure</li> </ol>"},{"location":"api-reference/#maintenance-requirements","title":"Maintenance Requirements","text":"<ul> <li>28-Day Publishing: Users must publish at least every 28 days to maintain UMAP access</li> <li>Memory Cleanup: Old messages are automatically archived after 50 entries</li> <li>AI Model Updates: Ollama models are maintained automatically</li> <li>Relay Health: strfry relay status is monitored continuously</li> </ul> <p>Last updated: January 2024</p>"},{"location":"developer-quickstart/","title":"UPlanet Developer Quickstart","text":"<p>Get started building UPlanet-compatible applications in minutes</p>"},{"location":"developer-quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic knowledge of bash scripting</li> <li>Familiarity with JSON and web technologies</li> <li>A UPlanet node running locally (optional for testing)</li> </ul>"},{"location":"developer-quickstart/#step-1-create-your-first-bro-service","title":"Step 1: Create Your First #BRO Service","text":""},{"location":"developer-quickstart/#11-set-up-project-structure","title":"1.1 Set Up Project Structure","text":"<pre><code># Create your project directory\nmkdir my-uplanet-app\ncd my-uplanet-app\n\n# Create the standard UPlanet structure\nmkdir -p {Documents,Images,Videos,Music,api}\ntouch manifest.json\n</code></pre>"},{"location":"developer-quickstart/#12-create-your-manifest","title":"1.2 Create Your Manifest","text":"<pre><code>{\n  \"name\": \"MyFirstApp\",\n  \"version\": \"1.0.0\",\n  \"description\": \"My first UPlanet-compatible application\",\n  \"tags\": [\"#BRO\", \"#demo\", \"#tutorial\"],\n  \"api\": \"/api/myapp.sh\",\n  \"author\": \"Your Name\",\n  \"license\": \"AGPL-3.0\",\n  \"endpoints\": {\n    \"hello\": \"/api/hello\",\n    \"status\": \"/api/status\"\n  }\n}\n</code></pre>"},{"location":"developer-quickstart/#13-create-your-api","title":"1.3 Create Your API","text":"<p>```bash</p>"},{"location":"developer-quickstart/#create-main-api-script","title":"Create main API script","text":"<p>cat &gt; api/myapp.sh &lt;&lt; 'EOF'</p>"},{"location":"developer-quickstart/#binbash","title":"!/bin/bash","text":"<p>case \"$1\" in     \"hello\")         echo \"Hello from UPlanet!\"         echo \"Current time: $(date)\"         echo \"User: $(whoami)\"         ;;     \"status\")         echo \"Service status: ONLINE\"         echo \"Uptime: $(uptime)\"         echo \"Memory: $(free -h | grep Mem | awk '{print \\(3\"/\"\\)2}')\"         ;;     *)         echo \"Usage: $0 {hello|status}\"         echo \"Available endpoints:\"         echo \"  hello   - Greet the user\"         echo \"  status  - Show service status\"         exit 1         ;; esac</p>"},{"location":"quickstart/","title":"Guide de D\u00e9marrage Rapide UPlanet","text":"<p>D\u00e9marrez en 5 minutes avec le d\u00e9veloppement UPlanet</p>"},{"location":"quickstart/#prerequis","title":"Pr\u00e9requis","text":"<ul> <li>Python 3.8+ : python.org</li> <li>Git : git-scm.com</li> <li>Node.js 16+ : nodejs.org (optionnel)</li> </ul>"},{"location":"quickstart/#installation-express","title":"Installation Express","text":""},{"location":"quickstart/#1-cloner-le-projet","title":"1. Cloner le projet","text":"<pre><code>git clone https://github.com/papiche/papiche.github.io.git\ncd papiche.github.io\n</code></pre>"},{"location":"quickstart/#2-installer-les-dependances","title":"2. Installer les d\u00e9pendances","text":"<pre><code># Installer MkDocs et extensions\npip install -r requirements.txt\n\n# Installer les d\u00e9pendances suppl\u00e9mentaires\npip install mkdocs-git-revision-date-localized-plugin\n</code></pre>"},{"location":"quickstart/#3-lancer-le-serveur-de-developpement","title":"3. Lancer le serveur de d\u00e9veloppement","text":"<pre><code>mkdocs serve\n</code></pre> <p>Votre site sera disponible sur : http://127.0.0.1:8000</p>"},{"location":"quickstart/#creer-votre-premier-service-bro","title":"Cr\u00e9er votre premier service #BRO","text":""},{"location":"quickstart/#1-creer-la-structure","title":"1. Cr\u00e9er la structure","text":"<pre><code>mkdir mon-service-bro\ncd mon-service-bro\n\n# Cr\u00e9er la structure de base\nmkdir -p {api,Documents,Images,Music,Videos}\n</code></pre>"},{"location":"quickstart/#2-creer-le-manifeste","title":"2. Cr\u00e9er le manifeste","text":"<pre><code>{\n  \"name\": \"MonServiceBRO\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Mon premier service UPlanet\",\n  \"tags\": [\"#BRO\", \"#storage\", \"#documents\"],\n  \"api\": \"/api/monservice\",\n  \"author\": \"Votre Nom\",\n  \"license\": \"AGPL-3.0\",\n  \"endpoints\": {\n    \"upload\": \"/api/upload\",\n    \"download\": \"/api/download\",\n    \"search\": \"/api/search\"\n  }\n}\n</code></pre>"},{"location":"quickstart/#3-creer-lapi","title":"3. Cr\u00e9er l'API","text":"<pre><code>#!/bin/bash\n# api/monservice.sh\n\ncase \"$1\" in\n    \"upload\")\n        echo \"Upload: $2\"\n        ;;\n    \"download\")\n        echo \"Download: $2\"\n        ;;\n    \"search\")\n        echo \"Search: $2\"\n        ;;\n    *)\n        echo \"Usage: $0 {upload|download|search} &lt;file&gt;\"\n        ;;\nesac\n</code></pre>"},{"location":"quickstart/#4-tester-localement","title":"4. Tester localement","text":"<pre><code># Tester l'API\n./api/monservice.sh upload test.txt\n\n# G\u00e9n\u00e9rer la structure IPFS\n./generate_ipfs_structure.sh .\n</code></pre>"},{"location":"quickstart/#integration-avec-uspot","title":"Int\u00e9gration avec uSPOT","text":""},{"location":"quickstart/#1-connexion-a-lapi-uspot","title":"1. Connexion \u00e0 l'API uSPOT","text":"<pre><code>// Connexion \u00e0 l'API locale\nconst uspotUrl = 'http://127.0.0.1:54321';\n\n// Authentification NOSTR\nasync function authenticate(npub) {\n    const response = await fetch(`${uspotUrl}/api/test-nostr`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n        body: `npub=${npub}`\n    });\n    return response.json();\n}\n</code></pre>"},{"location":"quickstart/#2-utiliser-lia-locale","title":"2. Utiliser l'IA locale","text":"<pre><code>// Envoyer un message \u00e0 l'IA\nasync function sendAIMessage(message, lat, lon) {\n    const response = await fetch(`${uspotUrl}/astrobot_chat`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n            user_pubkey: 'your_hex_key',\n            message: message,\n            latitude: lat,\n            longitude: lon,\n            application: 'MonServiceBRO'\n        })\n    });\n    return response.json();\n}\n\n// Exemple d'utilisation\nsendAIMessage(\"#BRO #search UPlanet\", 48.8566, 2.3522);\n</code></pre>"},{"location":"quickstart/#publication","title":"Publication","text":""},{"location":"quickstart/#1-construire-le-site","title":"1. Construire le site","text":"<pre><code>mkdocs build\n</code></pre>"},{"location":"quickstart/#2-deployer-sur-github-pages","title":"2. D\u00e9ployer sur GitHub Pages","text":"<pre><code># Ajouter les changements\ngit add .\ngit commit -m \"Ajout de la documentation d\u00e9veloppeur\"\n\n# Pousser vers GitHub\ngit push origin main\n</code></pre> <p>Le site sera automatiquement mis \u00e0 jour sur https://papiche.github.io/</p>"},{"location":"quickstart/#commandes-utiles","title":"Commandes utiles","text":""},{"location":"quickstart/#developpement","title":"D\u00e9veloppement","text":"<pre><code># Serveur de d\u00e9veloppement\nmkdocs serve\n\n# Construire le site\nmkdocs build\n\n# Nettoyer le build\nmkdocs build --clean\n</code></pre>"},{"location":"quickstart/#deploiement","title":"D\u00e9ploiement","text":"<pre><code># D\u00e9ployer sur GitHub Pages\nmkdocs gh-deploy\n\n# D\u00e9ployer avec message personnalis\u00e9\nmkdocs gh-deploy --message \"Mise \u00e0 jour de la documentation\"\n</code></pre>"},{"location":"quickstart/#maintenance","title":"Maintenance","text":"<pre><code># V\u00e9rifier la configuration\nmkdocs build --strict\n\n# Valider les liens\nmkdocs build --strict --verbose\n</code></pre>"},{"location":"quickstart/#ressources-utiles","title":"Ressources utiles","text":"<ul> <li>Guide complet du d\u00e9veloppeur : Documentation d\u00e9taill\u00e9e</li> <li>R\u00e9f\u00e9rence API : Toutes les APIs disponibles</li> <li>Site officiel : Wiki UPlanet</li> <li>GitHub : Code source</li> </ul>"},{"location":"quickstart/#support","title":"Support","text":"<ul> <li>Issues : GitHub Issues</li> <li>Discussions : GitHub Discussions</li> <li>Documentation : Wiki UPlanet</li> </ul> <p>Derni\u00e8re mise \u00e0 jour : Janvier 2024 </p>"},{"location":"communaute/gouvernance/","title":"Gouvernance","text":"<p>Mode de d\u00e9cision et d\u2019\u00e9volution du wiki.</p>"},{"location":"communaute/hall-of-fame/","title":"Hall of Fame","text":"<p>Joueurs et cr\u00e9ateurs \u00e9m\u00e9rites.</p>"},{"location":"personnages/ambassadrice-zenitha/","title":"Ambassadrice Zenitha","text":"<p>Gardienne de TerraZEN.</p>"},{"location":"personnages/fiche-modele/","title":"Fiche Personnage","text":""},{"location":"personnages/fiche-modele/#nom","title":"Nom","text":""},{"location":"personnages/fiche-modele/#capacites","title":"Capacit\u00e9s","text":""},{"location":"personnages/fiche-modele/#histoire","title":"Histoire...","text":""},{"location":"regles/alternatives/","title":"R\u00e8gles alternatives","text":"<p>Variantes propos\u00e9es par la communaut\u00e9.</p>"},{"location":"regles/base/","title":"R\u00e8gles de base","text":"<p>Voici les r\u00e8gles de base du jeu UPlanet.</p>"},{"location":"ressources/outils/","title":"Outils","text":"<p>Liste d\u2019outils utiles pour les joueurs et cr\u00e9ateurs.</p>"},{"location":"scenarios/la-revolte-des-nodes/","title":"La R\u00e9volte des Nodes","text":"<p>Un sc\u00e9nario de soul\u00e8vement num\u00e9rique.</p>"},{"location":"scenarios/modele-scenario/","title":"Mod\u00e8le de sc\u00e9nario","text":""},{"location":"scenarios/modele-scenario/#titre","title":"Titre","text":""},{"location":"scenarios/modele-scenario/#contexte","title":"Contexte","text":""},{"location":"scenarios/modele-scenario/#objectifs","title":"Objectifs...","text":""},{"location":"uplanets/exemple-uplanet/","title":"\ud83c\udf0d UPlanet : TerraZEN","text":""},{"location":"uplanets/exemple-uplanet/#histoire","title":"Histoire","text":"<p>TerraZEN est n\u00e9e...</p>"},{"location":"uplanets/modele-fiche/","title":"Mod\u00e8le de fiche UPlanet","text":""},{"location":"uplanets/modele-fiche/#nom","title":"Nom","text":""},{"location":"uplanets/modele-fiche/#histoire","title":"Histoire","text":""},{"location":"uplanets/modele-fiche/#ressources","title":"Ressources...","text":""}]}